{"version":3,"sources":["utils/mastermind.js","components/StartGameBtn.js","App.js","serviceWorker.js","index.js"],"names":["Mastermind","colors","numOfColorsToFind","this","secret","count","initGame","newSecret","i","j","Math","random","length","push","makeSecret","console","log","guess","correctColorsAndPositions","correctColorsWrongPositions","secretCheck","Button","styled","button","StartGameBtn","props","setMm","setStarted","setNumGuess","setGuesses","setAnswers","setWon","onClick","mastermind","GameWrapper","div","Wrapper","App","useState","started","mm","numGuess","guesses","answers","won","useEffect","checkGuess","play","black","white","answerView","prev","animateScroll","scrollToBottom","containerId","duration","className","style","background","map","val","key","uniqid","id","singleGuess","index","answer","singleAnswer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e22cd6f.chunk.js","sourcesContent":["export default class Mastermind {\r\n  constructor(colors /*array*/, numOfColorsToFind /*num*/) {\r\n    this.colors = colors; // array\r\n    this.numOfColorsToFind = numOfColorsToFind; // num\r\n    this.secret = []; // array\r\n    this.count = 0; // num\r\n    this.initGame(); // method\r\n  }\r\n  makeSecret() {\r\n    let newSecret = [];\r\n    for (let i = 0; i < this.numOfColorsToFind; i++) {\r\n      let j = ~~(Math.random() * this.colors.length);\r\n      newSecret.push(this.colors[j]);\r\n    }\r\n    return newSecret;\r\n  }\r\n  initGame() {\r\n    this.secret = this.makeSecret(); // returns an array\r\n    console.log(\r\n      `possible colors: ${this.colors}\\n\\nfind the ${this.numOfColorsToFind} colors code...`\r\n    );\r\n  }\r\n  play(guess /*array*/) {\r\n    // submitted by player\r\n    let correctColorsAndPositions = 0;\r\n    let correctColorsWrongPositions = 0;\r\n    let secretCheck = [...this.secret];\r\n    this.count++;\r\n    for (let i = 0; i < this.numOfColorsToFind; i++) {\r\n      if (secretCheck[i] === guess[i]) {\r\n        secretCheck[i] = null;\r\n        guess[i] = null;\r\n        correctColorsAndPositions++;\r\n      }\r\n    }\r\n    for (let i = 0; i < this.numOfColorsToFind; i++) {\r\n      for (let j = 0; j < this.numOfColorsToFind; j++) {\r\n        if (secretCheck[i] !== null && secretCheck[i] === guess[j]) {\r\n          secretCheck[i] = null;\r\n          guess[j] = null;\r\n          correctColorsWrongPositions++;\r\n        }\r\n      }\r\n    }\r\n    return [correctColorsAndPositions, correctColorsWrongPositions];\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport mastermind from '../utils/mastermind.js';\r\n\r\nconst Button = styled.button`\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n  font-size: 20px;\r\n  padding: 15px 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  color: #eee;\r\n  border: none;\r\n`;\r\n\r\nfunction StartGameBtn(props) {\r\n  const {\r\n    setMm,\r\n    setStarted,\r\n    setNumGuess,\r\n    setGuesses,\r\n    setAnswers,\r\n    setWon,\r\n  } = props;\r\n\r\n  const handleClick = () => {\r\n    setMm(new mastermind(['8', '2', '4', '7'], 3));\r\n    setStarted(true);\r\n    setNumGuess([]);\r\n    setGuesses([]);\r\n    setAnswers([]);\r\n    setWon(false);\r\n  };\r\n  return <Button onClick={handleClick}>NEW GAME</Button>;\r\n}\r\n\r\nexport default StartGameBtn;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { animateScroll } from 'react-scroll';\r\nimport './App.css';\r\nimport StartGameBtn from './components/StartGameBtn.js';\r\nimport uniqid from 'uniqid';\r\n\r\nconst GameWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: linear-gradient(\r\n    135deg,\r\n    rgba(30, 87, 153, 1) 0%,\r\n    rgba(41, 137, 216, 1) 50%,\r\n    rgba(32, 124, 202, 1) 51%,\r\n    rgba(125, 185, 232, 1) 100%\r\n  );\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  max-width: 650px;\r\n  margin: 0 auto;\r\n  .secret {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: none;\r\n  }\r\n  .congratulations {\r\n    margin: auto;\r\n    text-align: center;\r\n    h1 {\r\n      width: 100%;\r\n      outline: 10px solid rgba(255, 255, 255, 0.5);\r\n      outline-offset: 20px;\r\n      font-size: 25px;\r\n    }\r\n    p {\r\n      width: 100%;\r\n      margin-top: 50px;\r\n    }\r\n  }\r\n  .game-body {\r\n    display: flex;\r\n    width: 100%;\r\n    overflow-y: scroll;\r\n    flex-grow: 1;\r\n    -ms-overflow-style: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n  .guesses {\r\n    width: 65%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  .answers {\r\n    width: 35%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  @media (min-width: 500px) {\r\n    .guesses {\r\n      width: 75%;\r\n    }\r\n    .answers {\r\n      width: 25%;\r\n    }\r\n  }\r\n  .row {\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n    width: 100%;\r\n    height: 45px;\r\n    min-height: 45px;\r\n    background: rgba(255, 255, 255, 0.2);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 0 25px;\r\n    align-items: center;\r\n  }\r\n  @media (min-width: 500px) {\r\n    .row {\r\n      margin-top: 35px;\r\n      margin-bottom: 35px;\r\n    }\r\n  }\r\n  .box {\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 50%;\r\n    background-size: cover;\r\n    transform: scale(3);\r\n  }\r\n  @media (min-width: 500px) {\r\n    .box {\r\n      width: 20px;\r\n      height: 20px;\r\n    }\r\n  }\r\n  .box-small {\r\n    width: 20px;\r\n    height: 20px;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    border-radius: 50%;\r\n    border: 1px solid rgba(0, 0, 0, 0.2);\r\n  }\r\n  .box-small--white {\r\n    background: #ddd;\r\n  }\r\n  .box-small--black {\r\n    background: #111;\r\n  }\r\n  .secret-input {\r\n    background: rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  text-align: center;\r\n  @media (min-width: 500px) {\r\n    padding: 5% 0;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const [started, setStarted] = useState(false);\r\n  const [mm, setMm] = useState(null);\r\n  const [numGuess, setNumGuess] = useState([]);\r\n  const [guesses, setGuesses] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [won, setWon] = useState(false);\r\n\r\n  // gives a score after a line is completed\r\n  useEffect(() => {\r\n    if (started && numGuess.length === mm.secret.length) {\r\n      let checkGuess = [...numGuess];\r\n      let [black, white] = mm.play(checkGuess);\r\n      if (black === mm.secret.length) {\r\n        setWon(true);\r\n      }\r\n      let answerView = [];\r\n      for (let i = 0; i < black; i++) {\r\n        answerView.push('box-small box-small--black');\r\n      }\r\n      for (let i = 0; i < white; i++) {\r\n        answerView.push('box-small box-small--white');\r\n      }\r\n      for (let i = 0; i < mm.secret.length - black - white; i++) {\r\n        answerView.push('box-small');\r\n      }\r\n      setAnswers([...answers, [...answerView]]);\r\n    }\r\n  }, [answers, numGuess, mm, started]);\r\n\r\n  // re-initializes the current guesses after a line is completed\r\n  useEffect(() => {\r\n    if (started && numGuess.length === mm.secret.length) {\r\n      setGuesses(prev => {\r\n        return [...prev, [...numGuess]];\r\n      });\r\n      setNumGuess([]);\r\n    }\r\n  }, [numGuess, started, guesses, mm]);\r\n\r\n  // scroll to bottom\r\n  useEffect(() => {\r\n    if (started) {\r\n      animateScroll.scrollToBottom({\r\n        containerId: `game-body`,\r\n        duration: 50,\r\n      });\r\n    }\r\n  }, [started, guesses]);\r\n\r\n  return (\r\n    <Wrapper className=\"App\">\r\n      <GameWrapper className=\"game\">\r\n        <StartGameBtn\r\n          setMm={setMm}\r\n          setStarted={setStarted}\r\n          setNumGuess={setNumGuess}\r\n          setGuesses={setGuesses}\r\n          setAnswers={setAnswers}\r\n          setWon={setWon}\r\n        />\r\n        <div className=\"secret\">\r\n          {won && (\r\n            <div className=\"row\" style={{ background: 'rgba(0, 0, 0, 0.2)' }}>\r\n              {mm.secret.map(val => {\r\n                return <div className={`box img${val}`} key={uniqid()} />;\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"game-body\" id=\"game-body\">\r\n          {!won ? (\r\n            <>\r\n              <div className=\"guesses\">\r\n                {guesses.map(guess => {\r\n                  return (\r\n                    <div className=\"row\" key={uniqid()}>\r\n                      {guess.map(singleGuess => {\r\n                        return (\r\n                          <div\r\n                            className={`box img${singleGuess}`}\r\n                            key={uniqid()}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n                <div className=\"row\">\r\n                  {started &&\r\n                    mm.secret.map((guess, index) => {\r\n                      return (\r\n                        <div\r\n                          className={\r\n                            numGuess[index]\r\n                              ? `box img${numGuess[index]}`\r\n                              : 'box-small'\r\n                          }\r\n                          key={uniqid()}\r\n                        />\r\n                      );\r\n                    })}\r\n                </div>\r\n              </div>\r\n              <div className=\"answers\">\r\n                {answers.map(answer => {\r\n                  return (\r\n                    <div className=\"row\" key={uniqid()}>\r\n                      {answer.map(singleAnswer => {\r\n                        return <div className={singleAnswer} key={uniqid()} />;\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n                {!won && <div className=\"row\" />}\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"congratulations\">\r\n              <h1>CONGRATULATIONS</h1>\r\n              <p>You've won in {mm.count} guesses</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"secret-input\">\r\n          <div className=\"row\">\r\n            {started &&\r\n              mm.colors.map(val => {\r\n                return (\r\n                  <div\r\n                    className={`box img${val}`}\r\n                    key={uniqid()}\r\n                    onClick={() => {\r\n                      setNumGuess(prev => {\r\n                        return [...prev, val];\r\n                      });\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n      </GameWrapper>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}